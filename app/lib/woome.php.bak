<?php

/**
 * llamdas a Woocomemrce
 */

use Automattic\WooCommerce\Client;

class WooMe
{ // HOSTINGER
    private $url = "https://demotienda.nineteencustom.com";
    private $ck = "ck_28dbfd8beb92a9454faf59c2b6da225dee5ad60a";
    private $cs = "cs_dab1e683eff87b602d8b5ba293c57d8faf260de2";
    private $opt = ['version' => 'wc/v3', 'verify_ssl' => false];
    private $woocommerce;
    private $pdo;


    public function __construct()
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
    }

    public function goQueryProducts($sql)
    {
        $this->connectToWordpressDB();

        $mat = array();
        try {
            $res = $this->pdo->prepare($sql);
            $res->execute();

            $data = $res->fetchAll(PDO::FETCH_ASSOC);
            $mat = $data;
        } catch (PDOException $e) {
            $mat['status'] = 'error';
            $mat['message'] = $e->getMessage();
        }

        $key = 0;
        foreach ($mat as $product) {
            $ptoducts[$key]["ID"] = $product['product_id'];
            $ptoducts[$key]["Nombre"] = $product['product_name'];
            $ptoducts[$key]["Categoría"] = $product['category'];
            $ptoducts[$key]["Atributos"] = unserialize($product['attributes']);
            $ptoducts[$key]["Existencia"] = $product['stock_quantity'];

            $key++;
        }

        return $ptoducts;
    }

    public function getAllProducts()
    {
        $sql = "SELECT
        p.ID AS id,
        p.post_title AS name,
        CONCAT('[',
               GROUP_CONCAT(
                            IF(t.term_id <> 2,
                               JSON_OBJECT(
                                           'id', t.term_id,
                                           'name', t.name,
                                           'slug', t.slug
                                           ),
                               NULL
                               )
                            ),
               ']'
               ) AS categories, 
        a.meta_value AS attributes,
        IFNULL(m.meta_value, 0) AS stock_quantity,
        m_sku.meta_value AS sku,
        m_price.meta_value AS price,
        m_regular_price.meta_value AS regular_price,
        m_sale_price.meta_value AS sale_price,
        CONCAT('https://nineteengreen.com/', p.post_name) AS permalink
        FROM
        wp_posts p
        LEFT JOIN
        wp_term_relationships tr ON p.ID = tr.object_id
        LEFT JOIN
        wp_term_taxonomy tt ON tr.term_taxonomy_id = tt.term_taxonomy_id
        LEFT JOIN
        wp_terms t ON tt.term_id = t.term_id
        LEFT JOIN
        wp_postmeta a ON p.ID = a.post_id AND a.meta_key = '_product_attributes'
        LEFT JOIN
        wp_postmeta m ON p.ID = m.post_id AND m.meta_key = '_stock'
        LEFT JOIN
        wp_postmeta m_sku ON p.ID = m_sku.post_id AND m_sku.meta_key = '_sku'
        LEFT JOIN
        wp_postmeta m_price ON p.ID = m_price.post_id AND m_price.meta_key = '_price'
        LEFT JOIN
        wp_postmeta m_regular_price ON p.ID = m_regular_price.post_id AND m_regular_price.meta_key = '_regular_price'
        LEFT JOIN
        wp_postmeta m_sale_price ON p.ID = m_sale_price.post_id AND m_sale_price.meta_key = '_sale_price'
        WHERE
        p.post_type = 'product' AND p.post_title != 'AUTO-DRAFT' AND p.post_title IS NOT NULL 
        GROUP BY
        p.ID, p.post_title, a.meta_value, m.meta_value, m_sku.meta_value, m_price.meta_value, m_regular_price.meta_value, m_sale_price.meta_value, p.post_name
        ";

        $this->connectToWordpressDB();

        $mat = array();
        try {
            $res = $this->pdo->prepare($sql);
            $res->execute();

            $data = $res->fetchAll(PDO::FETCH_ASSOC);
            $mat = $data;
        } catch (PDOException $e) {
            $mat['status'] = 'error';
            $mat['message'] = $e->getMessage();
        }

        $key = 0;
        foreach ($mat as $product) {
            $products[$key]["cod"] = intval($product['id']);
            $products[$key]["sku"] = $product['sku'];
            $products[$key]["name"] = $product['name'];
            $products[$key]["stock_quantity"] = $product['stock_quantity'];
            $products[$key]["price"] = $product['price'];
            $products[$key]["regular_price"] = $product['regular_price'];
            $products[$key]["permalink"] = $product['permalink'];
            $products[$key]["attributes"] = unserialize($product['attributes']);
            $products[$key]["categories"] = json_decode($product['categories'], true);

            $key++;
        }

        return $products;
    }
    public function getOrdersCount($customer_email)
    {
        $sql = "SELECT
        COUNT(a.ID) total_ordenes
        FROM
        wp_postmeta b
        RIGHT JOIN wp_posts a ON
        a.ID = b.post_id
        WHERE
        a.post_type = 'shop_order' AND b.meta_value = '$customer_email'    
        ";

        $this->connectToWordpressDB();

        $mat = array();
        try {
            $res = $this->pdo->prepare($sql);
            $res->execute();

            $data = $res->fetchAll(PDO::FETCH_ASSOC);
            $mat = $data;
        } catch (PDOException $e) {
            $mat['status'] = 'error';
            $mat['message'] = $e->getMessage();
        }

        return intval($mat[0]['total_ordenes']);
    }

    private function connectToWordpressDB()
    {
        try {
            $this->pdo = new PDO(
                LOCAL_DSN_NINETEEN,
                LOCAL_USER,
                LOCAL_PASS,
                array(
                    PDO::MYSQL_ATTR_INIT_COMMAND => "SET lc_time_names = 'es_ES', NAMES utf8"
                )
            );
            $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        } catch (PDOException $e) {
            die("Database connection failed: " . $e->getMessage());
        }
    }

    /**
     * Enviar correos 
     * */
    public function enviarCorreoElectronico($order_id, $html_message)
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        // Obtén el correo electrónico del cliente desde la API de WooCommerce
        $dataOrder = $this->getOrderById($order_id);
        $customer_email = $dataOrder->billing->email;

        // Dirección de correo del remitente
        $from_email = 'nineteenventas@gmail.com';

        // Asunto del correo
        $subject = 'Correo de pruebas con formato html';

        // Encabezados para el formato HTML
        $headers = "MIME-Version: 1.0" . "\r\n";
        $headers .= "Content-type: text/html; charset=UTF-8" . "\r\n";
        $headers .= "From: $from_email" . "\r\n";

        // Envía el correo electrónico utilizando la función mail()
        $mail_sent = mail($customer_email, $subject, $html_message, $headers);

        if ($mail_sent) {
            return $html_message; // Éxito
        } else {
            return false; // Error
        }
    }
    public function sendMail($order_id, $html_message)
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        // Preparar los datos para agregar la nota
        $data = [
            'note' => $html_message,
            'customer_note' => true
        ];

        // Llama a la API de WooCommerce para agregar la nota
        $response = $this->woocommerce->post('orders/' . $order_id . '/notes', $data);

        // Verifica la respuesta de la API
        if (!empty($response->id)) {
            return true; // Éxito al agregar la nota y enviar el correo
        } else {
            return false; // Error al agregar la nota a la orden
        }
    }

    public function sendMail_old_1($order_id, $mensaje)
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        $dataOrder = $this->getOrderById($order_id);

        $email = $dataOrder->billing->email;

        /* $data = [
        'note' => $mensaje,
        'customer_note' => true
        ];
        // Llama a la API de WooCommerce para agregar la nota y enviar el correo electrónico
        $response = $this->woocommerce->post('orders/' . $order_id . '/notes', $data);
        // Verifica la respuesta y devuelve un indicador de éxito o error
        if (!empty($response->id)) {
        return true; // Éxito
        } else {
        return false; // Error
    } */
    }

    public function getOrderById($id_order)
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        $order = 'orders/' . $id_order;
        $myOrder = $this->woocommerce->get($order);

        return $myOrder;
    }

    /**
     * INICIO ORDENES
     */

    public function createOrder($order_data, $newJson)
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        // PREPARAR DATOS PARA LA CREACIÓN DE LA ORDEN ...
        $customer_data = $this->getCustomerById($order_data["id_wp"]);

        // PROCESAR LAS PRODUCTOS
        if (count(json_decode($newJson['productos'], true)) === 0) {
            $arrayProducts[] = [];
        } else {
            foreach (json_decode($newJson['productos'], true) as $key => $producto) {
                $cantidad = intval($producto["cantidad"]);
                // $codigo = intval($producto["cod"]);
                $arrayProducts[] = [
                    'product_id' => $producto["cod"],
                    'quantity' => $cantidad
                ];
            }
        }

        // Crear vector de datos delprodcuto
        $data = [
            'payment_method' => 'usd',
            'payment_method_title' => 'Dollars',
            'set_paid' => false,
            'billing' => [
                'first_name' => $customer_data->first_name,
                'last_name' => $customer_data->last_name,
                'address_1' => $customer_data->billing->address_1,
                'address_2' => '',
                'city' => 'Mérida',
                'state' => 'VE',
                'postcode' => '5145',
                'country' => 'VE',
                'email' => $customer_data->email,
                'customer_id' => $customer_data->id,
                'phone' => $customer_data->billing->phone
            ],
            'shipping' => [
                'first_name' => $customer_data->first_name,
                'last_name' => $customer_data->last_name,
                'address_1' => 'Venezuela',
                'address_2' => '',
                'city' => 'Mérida',
                'state' => 'VE',
                'postcode' => '5145',
                'country' => 'VE'
            ],
            'line_items' => $arrayProducts,
            'shipping_lines' => [
                [
                    'method_id' => 'flat_rate',
                    'method_title' => 'Flat Rate',
                    'total' => '0.00'
                ]
            ]
        ];

        // return $data;
        $myOrder = $this->woocommerce->post('orders/', $data);
        return $myOrder;
        // return $order_data;
    }

    public function updateOrderStatus($id, $status)
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        $data = [
            'status' => $status
        ];

        return json_encode($this->woocommerce->put('orders/' . $id, $data));
    }

    /**
     * FIN ORDENES
     */

    /**
     * INICIO PRODUCTOS
     */
    public function getProductById($id)
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        // $woocommerce  = new Client($this->url, $this->ck, $this->cs, $this->opt);
        $endpoint = 'products/' . $id;
        $response = $this->woocommerce->get($endpoint);

        return $response;
    }

    public function getProductSKU($id)
    {
        // $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        // $woocommerce  = new Client($this->url, $this->ck, $this->cs, $this->opt);
        // $endpoint = 'products/' . $id;
        // $response = $this->woocommerce->get($endpoint);

        $sql = "SELECT sku FROM wp_wc_product_meta_lookup WHERE product_id = " . $id . ";";

        $this->connectToWordpressDB();

        $response = array();
        try {
            $res = $this->pdo->prepare($sql);
            $res->execute();

            $data = $res->fetchAll(PDO::FETCH_ASSOC);
            $response = $data;
        } catch (PDOException $e) {
            $response['status'] = 'error';
            $response['message'] = $e->getMessage();
        }

        // return $response->sku;
        return $response[0]['sku'];
    }

    function getAllProductsOld()
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        $endpoint = 'products';
        $page = 1;
        $perPage = 80;
        $allProducts = array();

        do {
            $response = $this->woocommerce->get($endpoint, ['per_page' => $perPage, 'page' => $page, 'fields' => 'id, sku, name, stock_quantity, price, regular_price, sale_price, permalink, images, virtual']);

            if (empty($response)) {
                break;
            }

            $allProducts = array_merge($allProducts, $response);

            $page++;
        } while (count($response) === $perPage);

        $formattedProducts = array_map(function ($product) {
            $formattedProduct = [
                'cod' => $product->id,
                'sku' => $product->sku,
                'name' => $product->name,
                'stock_quantity' => $product->stock_quantity,
                'price' => $product->price,
                'regular_price' => $product->regular_price,
                'sale_price' => $product->sale_price,
                'permalink' => $product->permalink,
                'virtual' => $product->virtual,
                'attributes' => $product->attributes,
                'categories' => $product->categories
            ];

            return $formattedProduct;
        }, $allProducts);

        return json_encode($formattedProducts);
    }

    public function createProduct($name, $sku, $regular_price, $stock_quantity, $categories, $sizes)
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        // Verificar name
        if (trim(strlen($name)) === 0) {
            $name = "Asigne un nombre";
        }

        // Verificar price
        $regular_price = str_replace(",", ".", $regular_price);
        if (!is_numeric($regular_price)) {
            $regular_price = 0.0;
        }

        // Verificar Cantidad
        if (is_numeric($stock_quantity)) {
            $stock_quantity = intval($stock_quantity);
        } else {
            $stock_quantity = 0;
        }

        // PROCESAR LAS CATEGORIAS
        $myCategories = array();

        $arrayCat = explode(",", $categories);
        if (count($arrayCat) === 0) {
            $myCategories[] = ['id' => $categories];
        } else {
            foreach ($arrayCat as $key => $value) {
                $myCategories[] = ['id' => $value];
            }
        }

        // PROCESAR LAS TALLAS
        $mySizes = array();

        $arraySiz = explode(",", $sizes);
        if (count($arraySiz) === 0) {
            $mySizes[] = [
                'id' => 2,
                'name' => "Talla",
                'visible' => true,
                'options' => $sizes,
            ];
        } else {
            foreach ($arraySiz as $key => $value) {
                $tmp[] = $value;
            }

            $mySizes[] = [
                'id' => 2,
                'name' => "Talla",
                'visible' => true,
                'options' => $tmp,
            ];
        }

        // Crear vector de datos delprodcuto
        $data = [
            'name' => $name,
            'sku' => $sku,
            'stock_quantity' => $stock_quantity,
            'manage_stock' => true,
            'regular_price' => $regular_price,
            'type' => 'simple',
            'description' => '',
            'short_description' => '',
            'categories' => $myCategories,
            'attributes' => $mySizes,
        ];

        return json_encode($this->woocommerce->post('products', $data));
    }
    public function createProductLite($name, $regular_price, $category, $sku, $stock_quantity)
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        // return "<br>name: " . $name . "price: " . $regular_price;

        // Verificar name
        /* if (trim(strlen($name)) === 0) {
        $name = "Asigne un nombre";
        }
        // Verificar price
        $regular_price = str_replace(",", ".", $regular_price);
        if (!is_numeric($regular_price)) {
        $regular_price = 0.0;
        }
        // Crear array de categorías, recibimos las categorias separadas con comas
        // Separar los IDs de categoría en un arreglo
        $category_ids = explode(',', $categories);
        // Construir el arreglo de categorías
        $categories_array = array();
        foreach ($category_ids as $category_id) {
        $categories_array[] = array('id' => (int) $category_id);
        }
        foreach ($category_ids as $id) {
        $myCategories[] = ['id' => $id];
        $arrayCategories[] = array(
        'id' => (int)$id
        );
        }
        */
        $categories_array[] = array('id' => (int) $category);
        // Crear vector de datos delprodcuto
        $data = [
            'name' => $name,
            'sku' => $sku,
            'regular_price' => $regular_price,
            'stock_quantity' => $stock_quantity,
            'manage_stock' => true,
            'categories' => $categories_array,
        ];
        return json_encode($this->woocommerce->post('products', $data));
    }

    // Actualizar productos
    public function updateProduct($id, $name, $regular_price, $stock_quantity, $sku, $category)
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);

        $categories_array[] = array('id' => (int) $category);

        $data = [
            'name' => $name,
            'regular_price' => $regular_price,
            'stock_quantity' => $stock_quantity,
            'sku' => $sku,
            'manage_stock' => true,
            'stock_status' => "instock",
            'categories' => $categories_array,
        ];

        return json_encode($this->woocommerce->put('products/' . $id, $data));
    }

    public function updateProductQuantity($id, $stock_quantity)
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        $data = [
            'stock_quantity' => $stock_quantity,
            'manage_stock' => true,
            'stock_status' => "instock",
        ];

        return json_encode($this->woocommerce->put('products/' . $id, $data));
    }


    // Actualizar Stock (Cantidad de prodcuto)
    public function updateProductStock($id, $stock_quantity)
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        $data = [
            'stock_quantity' => $stock_quantity,
            'manage_stock' => true,
        ];
        return json_encode($this->woocommerce->put('products/' . $id, $data));
    }

    public function updateProductComision($product_id, $attribute_options)
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        $url = "products/" . $product_id;
        $existing_attributes = $this->woocommerce->get($url);

        if (empty($existing_attributes->attributes)) {
            // Guardar nuevos atributos
            $data = [
                'attributes' => [
                    [
                        'id' => 2,
                        'name' => 'Comisión',
                        'slug' => 'comision',
                        'position' => 2,
                        'visible' => true,
                        'options' => [$attribute_options],
                        'variation' => false,
                    ]
                ]

            ];
            $res = $this->woocommerce->put($url, $data);
        } else {
            // Eliminar atributos anteriores
            $data = [
                'attributes' => []
            ];
            $this->woocommerce->put($url, $data);

            // Guardar nuevos atributos
            $data = [
                'attributes' => [
                    [
                        'id' => 2,
                        'name' => 'Comisión',
                        'position' => 2,
                        'visible' => true,
                        'variation' => true,
                        'options' => [$attribute_options],
                    ]
                ],
            ];
            $res = $this->woocommerce->put($url, $data);
        }
        return json_encode($res);
    }

    // Eliminar Producto
    public function deleteProduct($id)
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        return json_encode($this->woocommerce->delete('products/' . $id, ['force' => true]));
    }

    // MANEJO DE ATRIBUTOS PARA CORTE
    # BUSCAR PRODUCTOS PARA ASIGNAR SU ATRIBUTO DE COMISIONES
    function getProductsAttr()
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        $endpoint = 'products';
        $page = 1;
        $perPage = 100;
        $allProducts = array();

        do {
            $response = $this->woocommerce->get($endpoint, ['per_page' => $perPage, 'page' => $page, 'fields' => 'id, sku, name, stock_quantity, price, regular_price, sale_price, permalink, images, virtual']);

            if (empty($response)) {
                break;
            }

            $allProducts = array_merge($allProducts, $response);

            $page++;
        } while (count($response) === $perPage);

        $formattedProducts = array_map(function ($product) {
            $formattedProduct = [
                'cod' => $product->id,
                'name' => $product->name,
                'permalink' => $product->permalink,
                'virtual' => $product->virtual,
                'attributes' => $product->attributes,
                'categories' => $product->categories
            ];

            return $formattedProduct;
        }, $allProducts);

        return json_encode($formattedProducts);
    }







    /**
     * FIN PRODUCTOS
     */

    /**
     * INICIO CLIENTES
     */
    public function getCustomerById($id)
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        // $woocommerce  = new Client($this->url, $this->ck, $this->cs, $this->opt);
        $endpoint = 'customers/' . $id;
        $response = $this->woocommerce->get($endpoint);

        return $response;
    }

    public function getCustomerByIdWP($id)
    {
        // $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        // $woocommerce  = new Client($this->url, $this->ck, $this->cs, $this->opt);
        // $endpoint = 'customers/' . $id;
        // $response = $this->woocommerce->get($endpoint);

        $sql = "SELECT
        u.user_login AS username,
        um.meta_value AS billing_first_name,
        um2.meta_value AS billing_last_name,
        um3.meta_value AS billing_email,
        um4.meta_value AS billing_phone,
        um5.meta_value AS billing_address_1,
        um6.meta_value AS billing_city,
        um7.meta_value AS billing_state,
        um8.meta_value AS billing_postcode
        FROM
        wp_users u
        INNER JOIN wp_usermeta um ON u.ID = um.user_id AND um.meta_key = 'billing_first_name'
        INNER JOIN wp_usermeta um2 ON u.ID = um2.user_id AND um2.meta_key = 'billing_last_name'
        INNER JOIN wp_usermeta um3 ON u.ID = um3.user_id AND um3.meta_key = 'billing_email'
        INNER JOIN wp_usermeta um4 ON u.ID = um4.user_id AND um4.meta_key = 'billing_phone'
        INNER JOIN wp_usermeta um5 ON u.ID = um5.user_id AND um5.meta_key = 'billing_address_1'
        INNER JOIN wp_usermeta um6 ON u.ID = um6.user_id AND um6.meta_key = 'billing_city'
        INNER JOIN wp_usermeta um7 ON u.ID = um7.user_id AND um7.meta_key = 'billing_state'
        INNER JOIN wp_usermeta um8 ON u.ID = um8.user_id AND um8.meta_key = 'billing_postcode'
        WHERE u.ID = " . $id . "
        ";
        $this->connectToWordpressDB();

        $response = array();
        try {
            $res = $this->pdo->prepare($sql);
            $res->execute();

            $data = $res->fetchAll(PDO::FETCH_ASSOC);
            $response = $data;
        } catch (PDOException $e) {
            $response['status'] = 'error';
            $response['message'] = $e->getMessage();
        }

        return $response;
    }

    public function getAllCustomesrs()
    {
        $sql = "SELECT
        u.ID AS id,
        um1.meta_value AS first_name,
        um2.meta_value AS last_name,
        um3.meta_value AS role,
        u.user_login AS username,
        um4.meta_value AS cedula,
        um5.meta_value AS address,
        um6.meta_value AS phone,
        u.user_email AS email,
        um7.meta_value sales_commission
        FROM
        wp_users u
        LEFT JOIN
        wp_usermeta um1 ON u.ID = um1.user_id AND um1.meta_key = 'first_name'
        LEFT JOIN
        wp_usermeta um2 ON u.ID = um2.user_id AND um2.meta_key = 'last_name'
        LEFT JOIN
        wp_usermeta um3 ON u.ID = um3.user_id AND um3.meta_key = 'wp_capabilities'
        LEFT JOIN
        wp_usermeta um4 ON u.ID = um4.user_id AND um4.meta_key = 'billing_postcode'
        LEFT JOIN
        wp_usermeta um5 ON u.ID = um5.user_id AND um5.meta_key = 'billing_address_1'
        LEFT JOIN
        wp_usermeta um6 ON u.ID = um6.user_id AND um6.meta_key = 'billing_phone'
        LEFT JOIN
        wp_usermeta um7 ON u.ID = um7.user_id AND um7.meta_key = 'sales_commission' 
        WHERE
        u.user_login != 'root'
        GROUP BY
        u.ID, um1.meta_value, um2.meta_value, um3.meta_value, u.user_login, um4.meta_value, um5.meta_value, um6.meta_value, u.user_email";


        $this->connectToWordpressDB();
        $mat = array();
        try {
            $res = $this->pdo->prepare($sql);
            $res->execute();
            $data = $res->fetchAll(PDO::FETCH_ASSOC);
            $mat = $data;
        } catch (PDOException $e) {
            $mat['status'] = 'error';
            $mat['message'] = $e->getMessage();
        }
        $key = 0;
        foreach ($mat as $customer) {
            $customers[$key]["id"] = intval($customer['id']);
            $customers[$key]["first_name"] = $customer['first_name'];
            $customers[$key]["last_name"] = $customer['last_name'];
            if (isset($customer['role'])) {
                $customers[$key]["role"] = unserialize($customer['role']);
            } else {
                $customers[$key]["role"] = [];
            }
            $customers[$key]["username"] = $customer['username'];
            $customers[$key]["cedula"] = $customer['cedula'];
            $customers[$key]["address"] = $customer['address'];
            $customers[$key]["phone"] = $customer['phone'];
            $customers[$key]["email"] = $customer['email'];
            $customers[$key]["sales_commission"] = $customer['sales_commission'];

            $key++;
        }
        return json_encode($customers);
    }
    /* public function getAllCustomesrsOld()
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        $response = $this->woocommerce->get('customers', ['_fields' => 'id,first_name,last_name,role,username,postcode,address_1,phone,email']);

        $page = 1;
        $perPage = 70;
        $customers = [];

        do {
            $response = $this->woocommerce->get('customers', [
                'page' => $page,
                'per_page' => $perPage,
            ]);

            foreach ($response as $customer) {
                $obj = [
                    'id' => $customer->id,
                    'first_name' => $customer->first_name,
                    'last_name' => $customer->last_name,
                    'role' => $customer->role,
                    'username' => $customer->username,
                    'cedula' => $customer->billing->postcode,
                    'address' => $customer->billing->address_1,
                    'phone' => $customer->billing->phone,
                    'email' => $customer->email,
                    'meta_data' => $customer->meta_data,
                ];

                $customers[] = $obj;
            }

            $page++;
        } while (count($response) === $perPage);

        return json_encode($customers);
    } */

    public function createCustomerNeneteen()
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        // Crear vector de datos del cliente
        $data = [
            'email' => 'nineteengreen@gmail.com',
            'first_name' => 'Nineteen',
            'last_name' => 'Sport',
            'username' => 'nineteensport',
            'billing' => [
                'first_name' => 'Nineteen',
                'last_name' => 'Sport',
                'company' => 'Nineteengreen',
                'address_1' => '13 entre calles 1 y 3 local 1-54, El Vigía',
                'address_2' => '',
                'city' => 'El Vigía',
                'state' => 'MRD',
                'postcode' => '5145',
                'country' => 'VE',
                'email' => 'nineteengreen@gmail.com',
                'phone' => '0414-0326592',
            ],
            'shipping' => [
                'first_name' => 'Nineteen',
                'last_name' => 'Sport',
                'company' => '',
                'address_1' => 'Venezuela',
                'address_2' => '',
                'city' => 'El Vigía',
                'state' => 'MRD',
                'postcode' => '5145',
                'country' => 'VE',
            ],
            'meta_data' => [
                [
                    'key' => 'sales_commission',
                    'value' => false,
                ],
            ],
        ];
        return json_encode($this->woocommerce->post('customers/', $data));
    }

    public function updateCustomerNine($customerID)
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        // Crear vector de datos para actualizar el cliente
        $data = [
            'meta_data' => [
                [
                    'key' => 'sales_commission',
                    'value' => 'false',
                ],
            ],
        ];

        // Realizar la solicitud de actualización del cliente
        $response = $this->woocommerce->put('customers/' . $customerID, $data);

        // Verificar si la solicitud fue exitosa y devolver la respuesta
        if ($response && !isset($response->code)) {
            return json_encode($response);
        } else {
            return json_encode($response);
        }
    }

    public function getCustomerByEmail($email)
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        $endpoint = 'customers';
        $response = $this->woocommerce->get($endpoint, ['email' => $email]);

        if (!empty($response)) {
            return $response[0]; // Devuelve el primer cliente encontrado
        } else {
            return null; // No se encontró ningún cliente con el correo electrónico dado
        }
    }

    public function createCustomer($first_name, $last_name, $cedula, $phone, $email, $address)
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        // verificar si el cliente existe
        $existing_customer = $this->getCustomerByEmail($email);
        if ($existing_customer != null) {
            $response = json_encode(['error' => 'El cliente ya existe']);
        } else {
            // Generar username alearotio
            $bytes = random_bytes(6);
            $token = bin2hex($bytes);
            $username = $first_name . $token;

            // Verificar email
            if ($email === "none") {
                $email = "none_" . $token . "@email.com";
            }

            if ($phone === "none") {
                $phone = "";
            }

            if ($address === "none") {
                $address = "";
            }

            // Generar username alearotio
            $bytes = random_bytes(6);
            $token = bin2hex($bytes);
            $username = $first_name . $token;

            // Crear vector de datos del cliente
            $data = [
                'email' => $email,
                'first_name' => $first_name,
                'last_name' => $last_name,
                'username' => $username,
                'billing' => [
                    'first_name' => $first_name,
                    'last_name' => $last_name,
                    'company' => '',
                    'address_1' => $address,
                    'address_2' => '',
                    'city' => 'El Vigía',
                    'state' => 'MRD',
                    'postcode' => $cedula,
                    'country' => 'VE',
                    'email' => $email,
                    'phone' => $phone,
                ],
                'shipping' => [
                    'first_name' => $first_name,
                    'last_name' => $last_name,
                    'company' => '',
                    'address_1' => 'Venezuela',
                    'address_2' => '',
                    'city' => 'El Vigía',
                    'state' => 'MRD',
                    'postcode' => $cedula,
                    'country' => 'VE',
                ],
                'meta_data' => [
                    [
                        'key' => 'sales_commission',
                        'value' => true,
                    ],
                ],
            ];

            $response = json_encode($this->woocommerce->post('customers/', $data));
        }

        // return json_encode($data);
        return $response;
    }

    public function updateCustomer($id, $first_name, $last_name, $cedula, $phone, $email, $address)
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        // Comprobar si el cliente existe
        $customer = $this->woocommerce->get('customers/' . $id);

        if (empty($customer)) {
            // Si el cliente no existe, crearlo
            return $this->createCustomer($first_name, $last_name, $cedula, $phone, $email, $address);
        } else {
            // VERIFICAR QUE TENGAMOS UN EMAIL VALIDO
            $bytes = random_bytes(6);
            $token = bin2hex($bytes);

            // Verificar email
            if ($email === "none") {
                $email = "none_" . $token . "@email.com";
            }

            // Si el cliente existe, actualizar sus datos
            $data = [
                'first_name' => $first_name,
                'last_name' => $last_name,
                'billing' => [
                    'postcode' => $cedula,
                    'phone' => $phone,
                    'address_1' => $address,
                ],
                'email' => $email,
            ];

            // return json_encode($this->woocommerce->put('customers/' . $id, $data));
            return $this->woocommerce->put('customers/' . $id, $data);
        }
    }

    public function deleteCustomer($id)
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        return json_encode($this->woocommerce->delete('customers/' . $id, ['force' => true]));
    }

    /**
     * FIN CLIENTES
     */

    /**
     * CATEGORIAS
     */
    public function getAllCategories()
    {
        $sql = "SELECT *
            FROM wp_terms AS t
            JOIN wp_term_taxonomy AS tt ON t.term_id = tt.term_id
            WHERE tt.taxonomy = 'product_cat';
        ";


        $this->connectToWordpressDB();
        $mat = array();
        try {
            $res = $this->pdo->prepare($sql);
            $res->execute();
            $data = $res->fetchAll(PDO::FETCH_ASSOC);
            $mat = $data;
        } catch (PDOException $e) {
            $mat['status'] = 'error';
            $mat['message'] = $e->getMessage();
        }
        /* $key = 0;
        foreach ($mat as $customer) {
            $customers[$key]["id"] = intval($customer['id']);
            $customers[$key]["first_name"] = $customer['first_name'];
            $customers[$key]["last_name"] = $customer['last_name'];
            if (isset($customer['role'])) {
                $customers[$key]["role"] = unserialize($customer['role']);
            } else {
                $customers[$key]["role"] = [];
            }
            $customers[$key]["username"] = $customer['username'];
            $customers[$key]["cedula"] = $customer['cedula'];
            $customers[$key]["address"] = $customer['address'];
            $customers[$key]["phone"] = $customer['phone'];
            $customers[$key]["email"] = $customer['email'];
            $customers[$key]["sales_commission"] = $customer['sales_commission'];

            $key++;
        } */
        // return json_encode($customers);
        return json_encode($mat);
    }

    public function getAllCategories_api()
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        $endpoint = 'products/categories/?per_page=20';
        $response = $this->woocommerce->get($endpoint);

        return json_encode($response);
    }

    public function getCategoryById($id_category)
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        $endpoint = 'products/categories/' . $id_category;
        $response = $this->woocommerce->get($endpoint);

        return json_encode($response);
    }
    /**
     * FIN CATEGORIAS
     */

    /**
     * ATRIBUTOS
     */
    public function getAllAttributes()
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        $endpoint = 'products/attributes/';
        $response = $this->woocommerce->get($endpoint);

        return json_encode($response);
    }
    /**
     * FIN ATRIBUTOS
     */

    /**
     * TALLAS
     */
    public function getSizes()
    {
        $sql = "SELECT *
            FROM wp_terms AS t
            JOIN wp_term_taxonomy AS tt ON t.term_id = tt.term_id
            WHERE tt.taxonomy = 'pa_tallas';
        ";


        $this->connectToWordpressDB();
        $mat = array();
        try {
            $res = $this->pdo->prepare($sql);
            $res->execute();
            $data = $res->fetchAll(PDO::FETCH_ASSOC);
            $mat = $data;
        } catch (PDOException $e) {
            $mat['status'] = 'error';
            $mat['message'] = $e->getMessage();
        }
        /* $key = 0;
        foreach ($mat as $customer) {
            $customers[$key]["id"] = intval($customer['id']);
            $customers[$key]["first_name"] = $customer['first_name'];
            $customers[$key]["last_name"] = $customer['last_name'];
            if (isset($customer['role'])) {
                $customers[$key]["role"] = unserialize($customer['role']);
            } else {
                $customers[$key]["role"] = [];
            }
            $customers[$key]["username"] = $customer['username'];
            $customers[$key]["cedula"] = $customer['cedula'];
            $customers[$key]["address"] = $customer['address'];
            $customers[$key]["phone"] = $customer['phone'];
            $customers[$key]["email"] = $customer['email'];
            $customers[$key]["sales_commission"] = $customer['sales_commission'];

            $key++;
        } */
        // return json_encode($customers);
        return json_encode($mat);
    }

    public function getSizes_api()
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        $endpoint = 'products/attributes/1/terms?per_page=40';
        $response = $this->woocommerce->get($endpoint);

        return json_encode($response);
    }
    /**
     * FIN TALLAS
     */

    /**
     * METODOS DE PAGO
     */
    public function getPG()
    {
        $this->woocommerce = new Client($this->url, $this->ck, $this->cs, $this->opt);
        $endpoint = 'payment_gateways/';
        $response = $this->woocommerce->get($endpoint);

        return $response;
    }
    /**
     * FIN METODOS DE PAGO
     */
}